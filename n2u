#!/usr/bin/perl

# This script return history of file item on NILFS2 filesystem. 

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

# For rel file path to abs path
use File::Spec;

# To convert from timestamp
use Date::Format;

$cChcp = '/usr/bin/chcp';
$cLscp = '/usr/bin/lscp';
$cDiff = '/usr/bin/diff';
$nMaxArgs = 50;

use Getopt::Long qw(GetOptions);

my $sUsage = <<KROK;

Usage:
  $0 log [-cp begin:end] FILENAME
  $0 diff -cp cp1:cp2 FILENAME
KROK

sub print_usage
{
  print $sUsage."\n";
}

sub no_args
{
  print_usage();
  exit 7;
}
 
my %option;
my @aCp;
my $sDevice = my $sMount = "";

GetOptions(
    \%option,
	'help|h',
    'revision|cp|r:s'
) or no_args();

if ($option{'help'})
{
  print "This script return history of file item on NILFS2 filesystem.\n\n";
  print "INSTALL: Copy script to /usr/local/bin\n";
  print_usage();
  print "NOTE: You need root privilegies and installed nilfs2 utilities.\n\n";
  print "*** If you need additional features, you can sponsor them. PayPal: updates\@mail.ru ***\n";
  exit 0;
}

$sCommand = $ARGV[0];

if (!$sCommand)
{
  print "Error: no command given!\n";
  print_usage();
  exit 11;
}

if ($sCommand ne 'log' && $sCommand ne 'diff')
{
  print "Error: unknown command: $sCommand!\n";
  print_usage();
  exit 12;
}

if (!$ARGV[1])
{
  print "Error: no filename!\n";
  print_usage();
  exit 13;
}

if (!-s $cChcp || !-s $cLscp)
{
  print "Please install nilfs2-utils packet!\n";
  exit 9;
}

if ($> != 0)
{
  print "You need root privelegies!\n";
  exit 8;
}

$sFileName = File::Spec->rel2abs( $ARGV[1] );

$cmd = "cat /proc/mounts | awk '{if (\$3==\"nilfs2\") print length(\$2) \" \" \$2 \" \" \$1}' | sort -r -n | cut -d ' ' -f 2-3";

my @output = `$cmd`;

if (0 == scalar @output)
{
  print "You don't have mounted NILFS2 filesystem!\n";
  exit 1;
}
chomp @output;

foreach (@output)
{
  #print "$_";
  ($sMount, $sDevice) = split(/\s/, $_);
  if (index($sFileName, $sMount) == 0)
  {
    last;
  }
}

if ($sMount eq "")
{
  print "Your file is not on NILFS2 filesystem!\n";
  exit 2;
}

# Get relative filename
$sRelFileName = substr($sFileName, length($sMount));

if (length($sRelFileName)==1)
{
  print "You don't specify concrete file!\n";
  exit 3;
}

if ($sCommand eq 'log')
{
  command_log();
}
elsif ($sCommand eq 'diff')
{
  command_diff();
}

sub get_cp_dir
{
  return '/tmp/nilfs2_'.$_[0];
}

sub mount_cp
{
  my $nSnapshot = $_[0];
  my $sDir = $_[1];
  
  if (! -d $sDir)
  {
    mkdir $sDir;
  }

  if (system("mount -t nilfs2 -r -o cp=$nSnapshot $sDevice $sDir") != 0)
  {
    rmdir $sDir;
    print "Unable to mount snapshot $nSnapshot to $sDir\n";
    exit 5;
  }
}

sub umount_cp
{
  my $sDir = $_[0];
  
  if (system("umount $sDir")!=0)
  {
    print "Unable to unmount $sDir\n";
    exit 6;
  }

  rmdir $sDir;
}

# First - list cp, second arg - ss
sub get_unsnapshot
{
  my %tmp;
  #my %snapshot;
  
  my @aRes = @{$_[0]};
  my @aSnap = @{$_[1]};
  
  foreach (@aRes) {$tmp{$_}=1;}
  #foreach ($_[1]) {$snapshot{$_}=1;}

  # Reverse snapshot to checkpoint
  if (0 < scalar @aSnap)
  {
    delete @tmp{@aSnap};
    
    @aRes = keys %tmp;

    return \@aRes;
  }
  return \@aRes;
}

sub unsnapshot
{
  my @unSnap = @{$_[0]};
  #print "unSnapshot ".Dumper(\@unSnap)."\n\n";
  if (0 < scalar @unSnap)
  {
    while ( my @chunk = splice(@unSnap, 0, $nMaxArgs) )
    {
      while (256 == system("$cChcp cp ".join(' ', @chunk).' 2> /dev/null'))
      {
        system "sleep 0.5";
      }
    }
  }
}

sub revert_snapshot
{  
  my $unSnap = get_unsnapshot($_[0], $_[1]);
  
  unsnapshot($unSnap);
  #print "Desnapshot ".Dumper(\@output)."\n\n";
}

###########  DIFF  ##################

sub command_diff
{
  my @snapshot = ();

  if (!$option{'revision'})
  {
    print "Option cp|revision|r is required!\n";
    exit 14;
  }
  
  (my $nCp1, my $nCp2) = split(/:/, $option{'revision'});
  
  @aCp = ($nCp1, $nCp2);
  
  my $cmd = "$cLscp -s $sDevice | tail -n +1 | awk '{if (\$1==$nCp1 || \$1==$nCp2) {print \$1}}'";
  @snapshot = `$cmd`;
  chomp @snapshot;
  
  if (2 > scalar @snapshot)
  {
    system("$cChcp ss $nCp1 $nCp2");
  }
  
  my $sDir1 = get_cp_dir($nCp1);
  
  mount_cp($nCp1, $sDir1);
  
  my $sDir2 = get_cp_dir($nCp2);
  
  mount_cp($nCp2, $sDir2);
  
  my $sFile1 = $sDir1.$sRelFileName;
  my $sFile2 = $sDir2.$sRelFileName;
  
  system("$cDiff -uNr $sFile1 $sFile2");
  
  umount_cp($sDir1);
  umount_cp($sDir2);
  
  revert_snapshot(\@aCp, \@snapshot);
}

###########  LOG   ##################

my %cache;

# result array
my @res = ();

sub get_mctime
{
  return ((stat($_[0]))[9])." ".((stat($_[0]))[10]);
}

# return [0..1, mtime, folder]
sub __get_node
{
  my $nSnapshot = @aCp[$_[0]];
  my $sDir = "/tmp/nilfs2_$nSnapshot";
  
  mount_cp($nSnapshot, $sDir);
  
  my $sTestFileName = $sDir.$sRelFileName;

  my @aRet = ();
  if (-e $sTestFileName)
  {
    @aRet = (1, get_mctime($sTestFileName), -s $sTestFileName);
  }
  else
  {
    # Get real existing parent folder
    my @aDir = split(/\//, $sRelFileName);

    shift @aDir;

    while (scalar @aDir)
    {
      pop @aDir;
      if (-e $sDir.'/'.join('/', @aDir))
      {
        last;
      }
    }

    if (0 == scalar @aDir)
    {
      @aRet = (0, get_mctime($sDir), '/');
    }
    else
    {
      my $sTmp = '/'.join('/', @aDir);
      @aRet = (0, get_mctime($sDir.$sTmp), $sTmp);
    }
  }
  
  umount_cp($sDir);
  
  return \@aRet;
}

sub get_node
{
  my $nEl = $_[0];

  if (!exists($cache{$nEl}))
  {
    $cache{$nEl} = __get_node($nEl);
  }

  return $cache{$nEl};
}

sub exists_el
{
  return (@{get_node($_[0])})[0]==1;
}

# return 1 if have difference
sub check_diff
{
  #print "check_diff $_[0] - $_[1]\n";
  
  my $sFirst = join ' ', @{get_node($_[0])};
  my $sLast = join(' ', @{get_node($_[1])});
  
  return $sFirst ne $sLast;
}

sub find_border
{

  my $nFirst = $_[0];
  my $nLast = $_[1];

  #print "find_border $nFirst - $nLast\n";

  if ($nLast - $nFirst == 1)
  {
    return $nLast;
  }

  my $nNew = int(0.5+($nLast+$nFirst)/2);

  if (check_diff($nFirst, $nNew))
  {
    return find_border($nFirst, $nNew);
  }
  else
  {
    return find_border($nNew, $nLast);
  }
}

sub define_borders
{
  #print "define_borders\n";
  my $nFirst = $_[0];
  my $nLast = $_[1];

  if (exists_el($nFirst))
  {
    push @res, $nFirst;
  }

  while (($nFirst < $nLast) && check_diff($nFirst, $nLast))
  {
    $nFirst = find_border($nFirst, $nLast);

    if (exists_el($nFirst))
    {
      push @res, $nFirst;
    }
    elsif (exists_el($nFirst-1) && !exists_el($nFirst))
    {
      push @res, $nFirst;
    }
  }
}


sub command_log
{
  my @aSnap = ();
  
  my $cmd;
  my $nCp1, my $nCp2;
  # Get snapshot list
  if ($option{'revision'})
  {
    ($nCp1, $nCp2) = split(/:/, $option{'revision'});
    
    $cmd = "$cLscp -s $sDevice | tail -n +2 | awk '{if ($nCp1 <= \$1 && \$1 <= $nCp2) {print \$1}}'";
  }
  else
  {
    $cmd = "$cLscp -s $sDevice | tail -n +2 | awk '{print \$1}'";  
  }
  
  @aSnap = `$cmd`;
  chomp @aSnap;

  if (0 < scalar @aSnap)
  {
    #print Dumper(\@aSnap)."\n";
    print "Existing snapshots: ".join(' ', @aSnap)."\n";
  }

  # Set all checkpoint to snapshot
  if ($option{'revision'})
  {
    $cmd = "$cLscp $sDevice | tail -n +2 | awk '{if ($nCp1 <= \$1 && \$1 <= $nCp2) {print \$1}}'| xargs -n$nMaxArgs $cChcp ss ";
  }
  else
  {
    # head -n -1 - Latest block is slow down work
    $cmd = "$cLscp $sDevice | tail -n +2 | head -n -1 | awk '{print \$1}'| xargs -n$nMaxArgs $cChcp ss ";
  }

  `$cmd`;

  # Set all spapshot to checkpoint
  # lscp -s |  tail -n +2 | awk '{print $1}'| xargs -n50 chcp cp ";

  # Get full non-break snapshot list
  if ($option{'revision'})
  {
    $cmd = "$cLscp -s $sDevice | tail -n +2 | awk '{if ($nCp1 <= \$1 && \$1 <= $nCp2) {print \$1}}'";
  }
  else
  {
    $cmd = "$cLscp -s $sDevice | tail -n +2 | awk '{print \$1}'";
  }

  @aCp = `$cmd`;
  chomp @aCp;

  if (0 == scalar @aCp)
  {
    print "You don't have checkpoint and snapshots!\n";
    exit 4;
  }

  define_borders(0, $#aCp);

  # Print final results

  print "          CHECKPOINT        DATE     TIME     TYPE          SIZE  MODE\n";

  my $sStatus = '';

  for ($i = 0; $i <= $#res ; $i++)
  {
    my $nRowNumber = $res[$i];
    my @Info = @{$cache{$nRowNumber}};
    my $nCheckpoint = $aCp[$nRowNumber];

    my @ts = split ' ', $Info[1];
    my $ts = ($ts[1] > $ts[0])?$ts[1]:$ts[0];

    my $sDateTime = time2str("%Y-%m-%d %T", $ts);
    my $sMode, my $sSize = '------------';

    # File exists
    if ($Info[0]==1)
    {

      if (0 == $i)
      {
        if ($nRowNumber == 0)
        {
          $sStatus = 'first';
        }
        else
        {
          $sStatus = 'created';
        }
      }
      elsif (($sStatus eq 'first') ||($sStatus eq 'created') || ($sStatus eq 'changed'))
      {
        $sStatus = 'changed';
      }
      elsif ($sStatus eq 'deleted')
      {
        $sStatus = 'created';
      }

      $sSize = sprintf('%12s', $Info[2]);
    }
    else
    {
      $sStatus = 'deleted';
    }

    $sMode = exists($snapshot{$nCheckpoint})?'ss':'cp';

    printf "%20d  %s  %7s  %s  %4s\n", $nCheckpoint, $sDateTime, $sStatus, $sSize, $sMode;
  }

  revert_snapshot(\@aCp, \@aSnap);
}
